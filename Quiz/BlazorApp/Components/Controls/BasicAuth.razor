@using Microsoft.Net.Http.Headers
@inject IHttpContextAccessor accessor
@inject NavigationManager NavManager
@inject IStateService StateService

@code {
    [Parameter, EditorRequired] public string Username { get; init; } = null!;
    [Parameter, EditorRequired] public string Password { get; init; } = null!;
    [Parameter] public RenderFragment? ChildContent { get; init; }
    [Parameter] public string Realm { get; init; } = "AuthRealm";

    private HttpContext Context => accessor?.HttpContext;

    private string IdentifierKey => $"{Realm}-{Context?.Connection?.Id}";
    private string AuthKey => $"{IdentifierKey}-IsAuthenticated";
    private string SecureKey => $"{IdentifierKey}-SecureArea";
    private string RequestKey => $"{IdentifierKey}-IsRequestSent";

    private bool IsAuthenticated => StateService.Get<bool>(AuthKey, false);
    private bool IsRequestSent => StateService.Get<bool>(RequestKey, false);

    private bool IsAuthorized
    {
        get
        {
            var headers = Context.Request.Headers;
            var credentials = ParseAuthorizationHeader(headers.Authorization.ToString());
            return headers.ContainsKey(HeaderNames.Authorization) &&
                   credentials != null &&
                   ValidateUser(credentials.Value.username, credentials.Value.password);
        }
    }
    private string SecureArea
    {
        get
        {
            if (!StateService.Contains(SecureKey))
            {
                StateService.Set(SecureKey, $"Secure-Area-{Guid.NewGuid()}");
            }
            return StateService.Get<string>(SecureKey, string.Empty);
        }
    }

    protected override void OnInitialized()
    {
        if (accessor?.HttpContext == null)
            throw new NullReferenceException($"{nameof(accessor)} service missing!");

        if (string.IsNullOrEmpty(Username) || string.IsNullOrEmpty(Password))
            throw new ArgumentNullException($"{nameof(Username)} or {nameof(Password)} cannot be NULL!");

        DisplayInfo("INIT");
        Authorize();
    }

    private void Authorize()
    {
        if (IsAuthenticated)
        {
            DisplayInfo("Already authenticated");
            return;
        }

        if(!StateService.Get<bool>(RequestKey, false))
        {
            DisplayInfo("Missing request");
            return;
        }

        if (IsAuthorized)
        {
            MarkAsAuthenticated();
            DisplayInfo("Authorization APPROVED");
        }
        else
        {
            DisplayInfo("Authorization FAILED - prompting again");
            RequestAuthorization();
        }
    }

    private void MarkAsAuthenticated()
    {
        StateService.Set(AuthKey, true);
        StateService.Set(RequestKey, true);
    }

    private void RequestAuthorization()
    {
        if (!Context.Response.HasStarted)
        {
            Context.Response.Headers.CacheControl = "no-store, no-cache, must-revalidate";
            Context.Response.Headers.Pragma = "no-cache";
            Context.Response.Headers.Expires = "0";
            Context.Response.Headers.WWWAuthenticate = $"Basic realm=\"{SecureArea}\"";
            Context.Response.StatusCode = StatusCodes.Status401Unauthorized;
            DisplayInfo("Sent WWW-Authenticate header");
        }
    }

    private (string username, string password)? ParseAuthorizationHeader(string authHeader)
    {
        if (string.IsNullOrEmpty(authHeader) || !authHeader.StartsWith("Basic ", StringComparison.OrdinalIgnoreCase))
            return null;

        var encodedCredentials = authHeader["Basic ".Length..].Trim();
        var credentialBytes = Convert.FromBase64String(encodedCredentials);
        var credentials = System.Text.Encoding.UTF8.GetString(credentialBytes).Split(':', 2);

        return credentials.Length == 2 ? (credentials[0], credentials[1]) : null;
    }

    public void Logout()
    {
        StateService.Remove(AuthKey);
        StateService.Remove(SecureKey);
        StateService.Remove(RequestKey);

        DisplayInfo("LOGOUT");

        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }

    private void Login()
    {
        StateService.Set(RequestKey, true);

        DisplayInfo("LOGIN");

        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }

    private bool ValidateUser(string username, string password) =>
        String.Equals(username, this.Username, StringComparison.Ordinal) &&
        String.Equals(password, this.Password, StringComparison.Ordinal);

    private void DisplayInfo(string? info = null)
    {
#if DEBUG
        if (!String.IsNullOrEmpty(info))
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine(info);
            Console.ResetColor();
        }
        Console.WriteLine("".PadRight(32, '-'));
        Console.WriteLine($"GET\tAUTH\t{(ParseAuthorizationHeader(Context.Request.Headers.Authorization.ToString())?.ToString() ?? "NULL")} -> ({Context.Request.Headers.Authorization})");
        Console.WriteLine($"GET\tWWW\t{Context.Request.Headers.WWWAuthenticate}");
        Console.WriteLine($"POST\tAUTH\t{(ParseAuthorizationHeader(Context.Response.Headers.Authorization.ToString())?.ToString() ?? "NULL")} -> ({Context.Response.Headers.Authorization})");
        Console.WriteLine($"POST\tWWW\t{Context.Response.Headers.WWWAuthenticate}");
        Console.WriteLine($"IsAuthenticated\t{IsAuthenticated}");
        Console.WriteLine($"IsAuthorized\t{IsAuthorized}");
        Console.WriteLine($"IsRequestSent\t{IsRequestSent}");
        Console.WriteLine($"IdentifierKey\t{IdentifierKey}");
        Console.WriteLine($"SecureArea\t{SecureArea}");
        Console.WriteLine("".PadRight(32, '-'));
#endif
    }
}

@if (IsAuthenticated)
{
    <button @onclick="Logout" type="button" class="btn btn-outline-danger btn-sm">Logout</button>
    @ChildContent
}
else
{
    <div class="d-flex flex-column justify-content-center align-items-center vh-100">
        <h1 class="mb-3">401 Unauthorized - Authentication Required</h1>
        <button @onclick="Login" type="button" class="btn btn-outline-primary">Login</button>
    </div>
}
