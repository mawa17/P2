@using Microsoft.Net.Http.Headers

@inject IBasicAuthService AuthService
@inject IHttpContextAccessor Accessor
@inject IDataService DataService
@inject NavigationManager NavManager

@code {
    [Parameter, EditorRequired] public string Username { get; init; } = null!;
    [Parameter, EditorRequired] public string Password { get; init; } = null!;
    [Parameter] public string Realm { get; init; } = "AuthRealm";
    [Parameter] public RenderFragment? ChildContent { get; init; }

    private HttpContext Context => Accessor!.HttpContext!;

    private string Key => $"{Realm}-{Context.Connection.Id}";


    protected override void OnInitialized()
    {
        if (Accessor?.HttpContext == null)
            throw new NullReferenceException($"{nameof(Accessor)} service missing!");

            
        if (String.IsNullOrWhiteSpace(Username) || String.IsNullOrWhiteSpace(Password))
            throw new ArgumentNullException("Username and Password are required");

    private void Authorize()
    {
        if (IsAuthenticated)
        {
            DisplayInfo("Already authenticated");
            return;
        }

        if (!AuthService.IsAuthenticated(Key))
        {
            DisplayInfo("Missing request");
            return;
        }

        if (IsAuthorized)
        {
            MarkAsAuthenticated();
            DisplayInfo("Authorization APPROVED");
        }
        else
        {
            DisplayInfo("Authorization FAILED - prompting again");
            RequestAuthorization();
        }
    }

    }

    private void RequestAuthorization()
    {
        if (!AccessorContext.Response.HasStarted)
        {
            AccessorContext.Response.Headers.CacheControl = "no-store, no-cache, must-revalidate";
            AccessorContext.Response.Headers.Pragma = "no-cache";
            AccessorContext.Response.Headers.Expires = "0";
            AccessorContext.Response.Headers.WWWAuthenticate = $"Basic realm=\"{SecureArea}\"";
            AccessorContext.Response.StatusCode = StatusCodes.Status401Unauthorized;
            DisplayInfo("Sent WWW-Authenticate header");
        }
    }

    private (string username, string password)? ParseAuthorizationHeader(string authHeader)
    {
        AuthService.Login(Key);
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }

    public void Logout()
    {
        AuthService.Logout(Key);
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }
<<<<<<< Updated upstream



    private void DisplayInfo(string? info = null)
    {
#if DEBUG
        if (!String.IsNullOrEmpty(info))
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine(info);
            Console.ResetColor();
        }
        Console.WriteLine("".PadRight(32, '-'));
        Console.WriteLine($"GET\tAUTH\t{(ParseAuthorizationHeader(AccessorContext.Request.Headers.Authorization.ToString())?.ToString() ?? "NULL")} -> ({AccessorContext.Request.Headers.Authorization})");
        Console.WriteLine($"GET\tWWW\t{AccessorContext.Request.Headers.WWWAuthenticate}");
        Console.WriteLine($"POST\tAUTH\t{(ParseAuthorizationHeader(AccessorContext.Response.Headers.Authorization.ToString())?.ToString() ?? "NULL")} -> ({AccessorContext.Response.Headers.Authorization})");
        Console.WriteLine($"POST\tWWW\t{AccessorContext.Response.Headers.WWWAuthenticate}");
        Console.WriteLine($"IsAuthenticated\t{IsAuthenticated}");
        Console.WriteLine($"IsAuthorized\t{IsAuthorized}");
        Console.WriteLine($"IsRequestSent\t{IsRequestSent}");
        Console.WriteLine($"IdentifierKey\t{IdentifierKey}");
        Console.WriteLine($"SecureArea\t{SecureArea}");
        Console.WriteLine("".PadRight(32, '-'));
#endif
    }
}

@if (AuthService.IsAuthenticated(Key))
{
    <button @onclick="Logout" type="button" class="btn btn-outline-danger btn-sm">Logout</button>
    @ChildContent
}
else
{
    <div class="d-flex flex-column justify-content-center align-items-center vh-100">
        <h1 class="mb-3">401 Unauthorized - Authentication Required</h1>
        <button @onclick="Login" type="button" class="btn btn-outline-primary">Login</button>
    </div>
}