@rendermode InteractiveServer


<div class="position-relative overflow-auto">
    <div class="table-responsive mb-5">
        <table class="table table-bordered text-center m-0">
            <thead class="table-dark">
                <tr>
                    <th scope="col" class="text-start">@Question.Text</th>
                    @for (int j = 0; j < Question.Options.Length; j++)
                    {
                        <th scope="col">Mit @((j == 0) ? "første" : (j == Question.Options.Length - 1) ? "sidste" : $"{j + 1}.") valg</th>
                    }
                </tr>
            </thead>
            <tbody>
                @for (int _ = 0; _ < Question.Options.Length; _++)
                {
                    int y = _;
                    var option = Question.Options[y];
                    <tr>
                        <td class="table-dark text-start">@option</td>
                        <InputRadioGroup @bind-Value="grid[y]">
                            @for (int __ = 0; __ < Question.Options.Length; __++)
                            {
                                int x = __;
                                string prefix = $"{x}{y}";
                                string elementPrefix = $"InputRadioId-{guid}{prefix}";
                                string columnPrefix = $"SET{x}";
                                string valuePrefix = $"SET{prefix}";
                                bool isSelected = grid[y] == valuePrefix;
                                bool isColumnSelected = grid.Any(val => val?.StartsWith(columnPrefix) == true);
                                bool isCellDisabled = isColumnSelected && !isSelected;
                                string cursorStyle = isCellDisabled ? "cursor: not-allowed;" : "cursor: pointer;";
                                <td class="position-relative p-0 m-0" style="@(isColumnSelected ? $"{cursorStyle}" : null)">
                                    <label for="@elementPrefix"
                                    style="cursor: pointer; @(isSelected ? "background-color: green;" : null)  @(isCellDisabled ? "pointer-events: none;" : "")"
                                    class="position-absolute d-flex align-items-center justify-content-center w-100 h-100">
                                        @(isSelected ? new MarkupString("<big>X</big>") : null)
                                        <InputRadio @onclick="() => ToggleColumnSelection(x, y)" Value="@($"SET{prefix}")" id="@elementPrefix" disabled="@(isCellDisabled)" />
                                    </label>
                                </td>
                            }
                        </InputRadioGroup>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="position-absolute bottom-0 start-50 translate-middle-x">
        <button @onclick="OnSubmit" hidden="@(!CanSubmit)" class="btn btn-dark">Submit</button>
    </div>
</div>


@{
#if DEBUG 
    MarkupString[] markups = {
        new($"<h1>x:{X}, y:{Y}</h1>"),
        new($"<h1>{String.Join(',', values) ?? "null"}</h1>"),
    };
    for (int i = 0; i < markups.Length; i++) @markups[i];
#endif
}

@code {
    [Parameter, EditorRequired]
    public QuestionModel Question { get; init; }



    private readonly string guid = Guid.NewGuid().ToString();
    private LinkedList<string?> values = new();
    private string?[] grid = { };
    private int X, Y;
    private bool CanSubmit => values.Count == Question.Options.Length;

    protected override void OnInitialized()
    {
        grid = new string[Question.Options.Length];
    }


    private void OnSubmit() 
    {
        if(!CanSubmit) 
        {
            return;
        }
        Console.WriteLine("SUBMIT");
    }

    private void ToggleColumnSelection(int x, int y)
    {
        string selection = $"SET{x}{y}";
        string value = Question.Options[y];
        Console.WriteLine($"{value} ({x})");
        if (grid[y] == selection)
        {
            grid[y] = null;
            values.Remove(value);
        }
        else
        {
            string? existing = grid[y];
            if (existing != null) values.Remove(value);
            grid[y] = selection;
            InsertAt(values, value, x);
        }
        X = x;
        Y = y;
        StateHasChanged();
    }

    private void InsertAt<T>(LinkedList<T> list, T value, int index)
    {
        if (index < 0 || index > Question.Options.Length)
            throw new ArgumentOutOfRangeException(nameof(index));
        var node = list.First;
        for (int i = 0; i < index; i++) node = node?.Next;
        if (node != null) list.AddBefore(node, value);
        else list.AddLast(value);
    }
}
